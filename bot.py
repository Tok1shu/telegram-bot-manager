import asyncio
import traceback

import validators
from datetime import datetime, timedelta
from typing import Dict, Any

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.callback_data import CallbackData

from config import Config, MESSAGES
from database import JSONDatabase


# ----------- –ö–õ–ê–°–°–´ –°–û–°–¢–û–Ø–ù–ò–ô -----------
class RedirectStates(StatesGroup):
    waiting_for_subdomain = State()
    waiting_for_url = State()
    waiting_for_temp_length = State()
    waiting_for_temp_url = State()
    waiting_for_expiry = State()
    confirm_random = State()


# ----------- CALLBACK_DATA -----------
class RedirectCallback(CallbackData, prefix="redirect"):
    action: str
    subdomain: str


class ExpiryCallback(CallbackData, prefix="expiry"):
    days: int


# ----------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø -----------
db = JSONDatabase("redirects.json")
bot = Bot(
    token=Config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

router = Router()


# ----------- –ö–õ–ê–í–ò–ê–¢–£–†–´ -----------
def get_main_keyboard(lang: str) -> ReplyKeyboardMarkup:
    keyboard = [
        [
            KeyboardButton(text="‚ûï " + MESSAGES[lang]["add_redirect"]),
            KeyboardButton(text="üïí " + MESSAGES[lang].get("add_temp", "–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π"))
        ],
        [
            KeyboardButton(text="üìã " + MESSAGES[lang]["list_redirects"]),
            KeyboardButton(text="üìä " + MESSAGES[lang].get("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_yes_no_keyboard(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ " + MESSAGES[lang].get("yes", "–î–∞"),
                    callback_data="yes"
                ),
                InlineKeyboardButton(
                    text="üîÑ " + MESSAGES[lang].get("no", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é"),
                    callback_data="no"
                )
            ]
        ]
    )


def get_expiry_keyboard(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="1 " + MESSAGES[lang].get("day", "–¥–µ–Ω—å"),
                    callback_data=ExpiryCallback(days=1).pack()
                ),
                InlineKeyboardButton(
                    text="7 " + MESSAGES[lang].get("days", "–¥–Ω–µ–π"),
                    callback_data=ExpiryCallback(days=7).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="30 " + MESSAGES[lang].get("days", "–¥–Ω–µ–π"),
                    callback_data=ExpiryCallback(days=30).pack()
                ),
                InlineKeyboardButton(
                    text="90 " + MESSAGES[lang].get("days", "–¥–Ω–µ–π"),
                    callback_data=ExpiryCallback(days=90).pack()
                )
            ]
        ]
    )


def get_redirect_keyboard(lang: str, subdomain: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üóë " + MESSAGES[lang].get("delete_button", "–£–¥–∞–ª–∏—Ç—å"),
                    callback_data=RedirectCallback(action="delete", subdomain=subdomain).pack()
                ),
                InlineKeyboardButton(
                    text="üìä " + MESSAGES[lang].get("stats_button", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                    callback_data=RedirectCallback(action="stats", subdomain=subdomain).pack()
                ),
            ]
        ]
    )


# ----------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò /START -----------
@router.message(Command("start"))
async def cmd_start(message: Message):
    lang = Config.DEFAULT_LANGUAGE
    if Config.WHITELIST_ENABLED and f"@{message.from_user.username}" not in Config.WHITELIST_USERS:
        await message.answer(MESSAGES[lang]["not_authorized"])
        return

    await message.answer(
        MESSAGES[lang]["welcome"],
        reply_markup=get_main_keyboard(lang)
    )


# ----------- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–°–¢–û–Ø–ù–ù–û–ì–û –†–ï–î–ò–†–ï–ö–¢–ê -----------
@router.message(F.text.regexp(r"^‚ûï"))
async def start_redirect_creation(message: Message, state: FSMContext):
    """
    –õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç"
    """
    lang = Config.DEFAULT_LANGUAGE
    await state.set_state(RedirectStates.waiting_for_subdomain)
    await message.answer(MESSAGES[lang]["enter_subdomain"])


@router.message(RedirectStates.waiting_for_subdomain)
async def process_subdomain(message: Message, state: FSMContext):
    """
    –°—é–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∂–µ–ª–∞–µ–º—ã–π —Å—É–±–¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "mylink").
    """
    lang = Config.DEFAULT_LANGUAGE
    subdomain = message.text.lower().strip()

    if not subdomain.isalnum():
        await message.answer(MESSAGES[lang]["invalid_subdomain"])
        return

    existing = await db.get_redirect(subdomain)
    if existing:
        await message.answer(MESSAGES[lang]["subdomain_exists"])
        return

    await state.update_data(subdomain=subdomain)
    await state.set_state(RedirectStates.waiting_for_url)
    await message.answer(MESSAGES[lang]["enter_url"])


@router.message(RedirectStates.waiting_for_url)
async def process_url(message: Message, state: FSMContext):
    lang = Config.DEFAULT_LANGUAGE
    url = message.text.strip()
    print(f"DEBUG: got message.text = {url}")

    if not validators.url(url):
        print("DEBUG: validators.url returned False.")
        await message.answer(MESSAGES[lang]["error_invalid_url"])
        return

    data = await state.get_data()
    subdomain = data["subdomain"]
    print(f"DEBUG: Adding redirect: subdomain={subdomain}, url={url}")

    try:
        await db.add_redirect(subdomain, url, message.from_user.id)
        print("DEBUG: add_redirect() done.")
    except Exception as e:
        print("ERROR while adding redirect:", e)
        print("TRACEBACK:", traceback.format_exc())
        await message.answer("‚ö†Ô∏è Internal error while adding redirect.")
        return

    await state.clear()
    print("DEBUG: State cleared.")

    try:
        await message.answer(
            MESSAGES[lang]["success"].format(
                subdomain=f"{subdomain}.{Config.DOMAIN}",
                url=url
            ),
            reply_markup=get_main_keyboard(lang)
        )
        print("DEBUG: Successfully sent 'redirect created' message.")
    except Exception as e:
        print("ERROR while sending success message:", e)
        print("TRACEBACK:", traceback.format_exc())



# ----------- –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ù–û–ì–û –†–ï–î–ò–†–ï–ö–¢–ê -----------
@router.message(F.text.regexp(r"^üïí"))
async def start_temp_redirect(message: Message, state: FSMContext):
    """
    –õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üïí –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π"
    """
    lang = Config.DEFAULT_LANGUAGE
    await state.set_state(RedirectStates.waiting_for_temp_length)
    await message.answer(MESSAGES[lang]["enter_temp_length"])


@router.message(RedirectStates.waiting_for_temp_length)
async def process_temp_length(message: Message, state: FSMContext):
    """
    –°—é–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–ª–∏–Ω—É —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—É–±–¥–æ–º–µ–Ω–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤).
    """
    lang = Config.DEFAULT_LANGUAGE
    try:
        length = int(message.text)
        if not 1 <= length <= Config.MAX_TEMP_REDIRECT_LENGTH:
            raise ValueError()
    except ValueError:
        await message.answer(MESSAGES[lang]["invalid_length"])
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É–±–¥–æ–º–µ–Ω
    random_link = db.generate_random_link(length)
    await state.update_data(length=length, random_link=random_link)

    await message.answer(
        MESSAGES[lang]["random_generated"].format(
            link=f"{random_link}.{Config.DOMAIN}"
        ),
        reply_markup=get_yes_no_keyboard(lang)
    )
    await state.set_state(RedirectStates.confirm_random)


@router.callback_query(RedirectStates.confirm_random, F.data.startswith("yes"))
async def confirm_random_link_yes(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—É–±–¥–æ–º–µ–Ω–∞ (yes).
    """
    lang = Config.DEFAULT_LANGUAGE
    await state.set_state(RedirectStates.waiting_for_temp_url)
    await callback.message.answer(MESSAGES[lang]["enter_url"])
    await callback.answer()


@router.callback_query(RedirectStates.confirm_random, F.data.startswith("no"))
async def confirm_random_link_no(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—Ç–µ–ª –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É (no).
    """
    lang = Config.DEFAULT_LANGUAGE
    data = await state.get_data()
    length = data.get('length')

    random_link = db.generate_random_link(length)
    await state.update_data(random_link=random_link)

    await callback.message.edit_text(
        MESSAGES[lang]["random_generated"].format(
            link=f"{random_link}.{Config.DOMAIN}"
        ),
        reply_markup=get_yes_no_keyboard(lang)
    )
    await callback.answer()


@router.message(RedirectStates.waiting_for_temp_url)
async def process_temp_url(message: Message, state: FSMContext):
    """
    –°—é–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç URL –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞.
    """
    lang = Config.DEFAULT_LANGUAGE
    url = message.text.strip()
    if not validators.url(url):
        await message.answer(MESSAGES[lang]["error_invalid_url"])
        return

    await state.update_data(url=url)
    await message.answer(
        MESSAGES[lang]["select_expiry"],
        reply_markup=get_expiry_keyboard(lang)
    )
    await state.set_state(RedirectStates.waiting_for_expiry)


@router.callback_query(RedirectStates.waiting_for_expiry, ExpiryCallback.filter())
async def process_expiry(callback: CallbackQuery, callback_data: ExpiryCallback, state: FSMContext):
    """
    –í—ã–±–∏—Ä–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (1, 7, 30, 90 –¥–Ω–µ–π).
    """
    lang = Config.DEFAULT_LANGUAGE
    days = callback_data.days
    data = await state.get_data()

    link = await db.add_temp_redirect(
        data["url"],
        callback.from_user.id,
        days,
        data.get("length")
    )

    expires = datetime.now() + timedelta(days=days)

    await callback.message.answer(
        MESSAGES[lang]["temp_success"].format(
            link=f"{link}.{Config.DOMAIN}",
            expires=expires.strftime("%d.%m.%Y %H:%M")
        ),
        reply_markup=get_main_keyboard(lang)
    )
    await state.clear()
    await callback.answer()


# ----------- –°–ü–ò–°–û–ö –†–ï–î–ò–†–ï–ö–¢–û–í -----------
@router.message(F.text.regexp(r"^üìã"))
async def list_redirects(message: Message):
    """
    –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    lang = Config.DEFAULT_LANGUAGE
    user_redirects = await db.get_user_redirects(message.from_user.id)

    if not user_redirects:
        await message.answer(MESSAGES[lang]["no_redirects"])
        return

    for subdomain, data in user_redirects.items():
        text = f"üîó {subdomain}.{Config.DOMAIN}\n"
        text += f"üìç {data['url']}\n"
        if "expires_at" in data:
            expires = datetime.fromisoformat(data["expires_at"])
            text += f"‚è∞ {MESSAGES[lang].get('expires_at', '–ò—Å—Ç–µ–∫–∞–µ—Ç')}: {expires.strftime('%d.%m.%Y %H:%M')}\n"

        kb = get_redirect_keyboard(lang, subdomain)
        await message.answer(text, reply_markup=kb)


# ----------- –£–î–ê–õ–ï–ù–ò–ï –†–ï–î–ò–†–ï–ö–¢–ê -----------
@router.callback_query(RedirectCallback.filter(F.action == "delete"))
async def delete_redirect_confirm(callback: CallbackQuery, callback_data: RedirectCallback):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    lang = Config.DEFAULT_LANGUAGE
    subdomain = callback_data.subdomain

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ " + MESSAGES[lang].get("confirm_delete_btn", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"),
                    callback_data=f"confirm_delete_{subdomain}"
                ),
                InlineKeyboardButton(
                    text="‚ùå " + MESSAGES[lang].get("cancel_delete_btn", "–û—Ç–º–µ–Ω–∞"),
                    callback_data="cancel_delete"
                )
            ]
        ]
    )
    text_del = MESSAGES[lang].get("delete_confirm", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?").format(
        subdomain=f"{subdomain}.{Config.DOMAIN}"
    )
    await callback.message.edit_text(text_del, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_redirect(callback: CallbackQuery):
    lang = Config.DEFAULT_LANGUAGE
    subdomain = callback.data.replace("confirm_delete_", "")

    if await db.delete_redirect(subdomain, callback.from_user.id):
        await callback.message.edit_text(MESSAGES[lang]["delete_success"])
    else:
        await callback.message.edit_text(MESSAGES[lang].get("delete_error", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è."))

    await callback.answer()


@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    lang = Config.DEFAULT_LANGUAGE
    await callback.message.edit_text(MESSAGES[lang].get("delete_cancelled", "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
    await callback.answer()


# ----------- –ü–û–ö–ê–ó –°–¢–ê–¢–ò–°–¢–ò–ö–ò -----------
@router.message(F.text.regexp(r"^üìä"))
async def show_stats(message: Message):
    lang = Config.DEFAULT_LANGUAGE
    user_redirects = await db.get_user_redirects(message.from_user.id)

    if not user_redirects:
        await message.answer(MESSAGES[lang]["no_redirects"])
        return

    stats_text = MESSAGES[lang].get("stats_header_all", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—à–∏–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º:\n\n")
    for subdomain, data in user_redirects.items():
        stats = data.get("stats", {})
        stats_text += f"üîó {subdomain}.{Config.DOMAIN}\n"
        stats_text += f"üëÜ {MESSAGES[lang].get('clicks', '–ö–ª–∏–∫–∏')}: {stats.get('clicks', 0)}\n"
        if stats.get("last_click"):
            last_click = datetime.fromisoformat(stats["last_click"])
            stats_text += f"üïí {MESSAGES[lang].get('last_click', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫')}: {last_click.strftime('%d.%m.%Y %H:%M')}\n"

        if stats.get("countries"):
            top_countries = sorted(
                stats["countries"].items(),
                key=lambda x: x[1],
                reverse=True
            )[:3]
            stats_text += f"üåç {MESSAGES[lang].get('top_countries', '–¢–æ–ø —Å—Ç—Ä–∞–Ω')}:\n"
            for country, clicks in top_countries:
                stats_text += f"   {country}: {clicks}\n"

        if stats.get("referrers"):
            top_referrers = sorted(
                stats["referrers"].items(),
                key=lambda x: x[1],
                reverse=True
            )[:3]
            stats_text += f"üîç {MESSAGES[lang].get('top_referrers', '–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤')}:\n"
            for referrer, clicks in top_referrers:
                stats_text += f"   {referrer}: {clicks}\n"

        stats_text += "\n"

    await message.answer(stats_text)


@router.callback_query(RedirectCallback.filter(F.action == "stats"))
async def show_redirect_stats(callback: CallbackQuery, callback_data: RedirectCallback):
    lang = Config.DEFAULT_LANGUAGE
    subdomain = callback_data.subdomain

    try:
        redirect_data = await db.get_redirect(subdomain)
        if not redirect_data:
            await callback.answer(MESSAGES[lang].get("redirect_not_found", "–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"))
            return

        stats = redirect_data.get("stats", {})
        stats_text = f"üìä {MESSAGES[lang].get('stats_for', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è')} {subdomain}.{Config.DOMAIN}\n\n"

        stats_text += f"üëÜ {MESSAGES[lang].get('clicks', '–ö–ª–∏–∫–∏')}: {stats.get('clicks', 0)}\n"

        if stats.get("last_click"):
            last_click = datetime.fromisoformat(stats["last_click"])
            stats_text += f"üïí {MESSAGES[lang].get('last_click', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫')}: {last_click.strftime('%d.%m.%Y %H:%M')}\n"

        if stats.get("countries"):
            stats_text += f"\nüåç {MESSAGES[lang].get('top_countries', '–¢–æ–ø —Å—Ç—Ä–∞–Ω')}:\n"
            top_countries = sorted(
                stats["countries"].items(),
                key=lambda x: x[1],
                reverse=True
            )[:3]
            for country, clicks in top_countries:
                stats_text += f"   {country}: {clicks}\n"

        if stats.get("referrers"):
            stats_text += f"\nüîç {MESSAGES[lang].get('top_referrers', '–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤')}:\n"
            top_referrers = sorted(
                stats["referrers"].items(),
                key=lambda x: x[1],
                reverse=True
            )[:3]
            for referrer, clicks in top_referrers:
                stats_text += f"   {referrer}: {clicks}\n"

        if "expires_at" in redirect_data:
            expires = datetime.fromisoformat(redirect_data["expires_at"])
            stats_text += f"\n‚è∞ {MESSAGES[lang].get('expires_at', '–ò—Å—Ç–µ–∫–∞–µ—Ç')}: {expires.strftime('%d.%m.%Y %H:%M')}"

        current_text = callback.message.text
        if current_text != stats_text:
            await callback.message.edit_text(
                stats_text,
                reply_markup=get_redirect_keyboard(lang, subdomain)
            )
        else:
            await callback.answer(MESSAGES[lang].get("stats_updated", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"))

    except Exception as e:
        print(f"Error in show_redirect_stats: {e}")
        await callback.answer(MESSAGES[lang].get("error_getting_stats", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"))

    await callback.answer()



async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

